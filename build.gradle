import com.sun.org.apache.xalan.internal.xsltc.compiler.Closure

plugins {
	id 'io.quarkus'
	id 'com.avast.gradle.docker-compose' version '0.14.9'
	id 'java'
	id 'eclipse'
	id 'idea'
}

group = 'com.nekose.sampleproject'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
//	maven { url 'https://localhost/---' }
}

sourceSets {
	main {
		resources.srcDirs = ["src/main/resources"]
	}
	integrationTest {
		java {
			srcDir 'src/integrationTest/java'
		}
		resources {
			srcDir 'src/integrationTest/resources'
		}
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}
}

ext {
	lombokVersion = '1.18.22'
	commonsVersion = '3.12.0'
}

//dependencyManagement {
//	imports {
//		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
//	}
//}

dependencies {
	implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")

	implementation 'io.quarkus:quarkus-arc'
	implementation 'io.quarkus:quarkus-spring-boot-properties'
	implementation 'io.quarkus:quarkus-spring-cloud-config-client'
	implementation 'io.quarkus:quarkus-spring-web'
	implementation 'io.quarkus:quarkus-spring-di'
	implementation 'io.quarkus:quarkus-smallrye-health'
	implementation 'io.quarkus:quarkus-config-yaml'
	
	// for api client
	implementation 'io.quarkus:quarkus-rest-client'
	implementation 'io.quarkus:quarkus-rest-client-jackson'
	implementation 'io.quarkus:quarkus-smallrye-fault-tolerance'

    // security
	implementation 'io.quarkus:quarkus-spring-security'

	// db
	implementation 'io.quarkus:quarkus-hibernate-orm-panache'
	implementation 'io.quarkus:quarkus-jdbc-mariadb'
//	implementation 'io.quarkiverse.mybatis:quarkus-mybatis:0.0.9'
	implementation 'io.quarkus:quarkus-redis-client'
	implementation 'io.quarkus:quarkus-flyway'

	// other
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	implementation "org.apache.commons:commons-lang3:${commonsVersion}"
	implementation "io.quarkus:quarkus-smallrye-openapi"

	// for test
	testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	testImplementation 'io.quarkus:quarkus-junit5'
	testImplementation 'io.quarkus:quarkus-junit5-mockito'
	testImplementation 'io.rest-assured:rest-assured'
}

configurations {
    all {
//        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
	compileOnly {
		extendsFrom annotationProcessor
	}
	testCompileOnly {
		extendsFrom testAnnotationProcessor
	}
	integrationTestCompile.extendsFrom testImplementation
	integrationTestRuntime.extendsFrom testRuntime
//	compileClasspath {
//		resolutionStrategy.activateDependencyLocking()
//	}
//	runtimeClasspath {
//		resolutionStrategy.activateDependencyLocking()
//	}
//	annotationProcessor {
//		resolutionStrategy.activateDependencyLocking()
//	}
}

quarkus {
	setWorkingDir("$projectDir") // Added to have a similar behavior as Spring Boot
}

compileJava {
	options.encoding = 'UTF-8'
	options.compilerArgs << '-parameters'
}

compileTestJava {
	options.encoding = 'UTF-8'
}

//defaultTasks("quarkusBuild")
//tasks["composeUp"].dependsOn("quarkusBuild")

quarkusDev {
	jvmArgs = [
		'-Dquarkus.profile=local',
		'-Dlogging.config=classpath:log4j2-local.xml'
	]
	logger.lifecycle("jvmArgs in")
	logger.lifecycle(project.hasProperty('jvmArgs') as String)
	logger.lifecycle("size: {}", project.getProperties().size())
	if (project.getProperties().size() > 0) {
		project.getProperties()
				.entrySet()
				.iterator()
				.forEachRemaining(p -> {
					logger.lifecycle("key : {}", p.getKey())
//					logger.lifecycle("value : {}", p.getValue())
				})
	}

	if (project.hasProperty('jvmArgs')) {
		jvmArgs = (project.jvmArgs.split("\\s+" as Closure) as List)
		logger.lifecycle("jvmArgs: {}", jvmArgs)
	}
	dependsOn(composeUp)
}
test {
	jvmArgs = [
		'-Dlogging.config=classpath:log4j2-local.xml'
	]
	useJUnitPlatform()
	testLogging {
		exceptionFormat 'full'
		events('started', 'passed', 'skipped', 'failed')
	}
	outputs.upToDateWhen { false }
	dependsOn(composeUp)
}

task integrationTest(type: Test) {
	useJUnitPlatform()
	group = "verification"
	testClassesDirs = sourceSets.integrationTest.output
	classpath = sourceSets.integrationTest.runtimeClasspath
	testLogging {
		exceptionFormat 'full'
		events('started', 'passed', 'skipped', 'failed')
	}
	mustRunAfter(test)
	outputs.upToDateWhen { false }
	dependsOn(composeUp)
}

task updateLockFile(type: Exec) {
	group = "other"
    executable = "$rootDir/update_gradle_lock_file.bat"
//    executable = "$rootDir/update_gradle_lock_file.sh"
}

dockerCompose {
	isRequiredBy(project.tasks.getByName("quarkusDev"))
	isRequiredBy(project.tasks.getByName("test"))
	isRequiredBy(project.tasks.getByName("integrationTest"))
}

// 以下の行を記載
tasks.withType(AbstractCompile)*.options*.encoding = tasks.withType(GroovyCompile)*.groovyOptions*.encoding = 'UTF-8'