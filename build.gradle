plugins {
	id 'org.springframework.boot' version '2.5.5'
	id 'com.avast.gradle.docker-compose' version '0.14.9'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'maven'
}

group = 'com.nekose.sampleproject'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
//	maven { url 'https://localhost/---' }
}

sourceSets {
	main {
		resources.srcDirs = ["src/main/resources"]
	}
	integrationTest {
		java {
			srcDir 'src/integrationTest/java'
		}
		resources {
			srcDir 'src/integrationTest/resources'
		}
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}
}

ext {
	springCloudVersion = '2020.0.4'
    mockitoVersion = '4.0.0'
    mariaDbClientVersion = '2.7.4'
    springColudSecurityVersion = '2.2.5.RELEASE'
	jedisVersion = '3.7.0'
	springMybatisVersion = '2.2.0'
	springRedisVersion = '2.5.5'
	commonsVersion = '3.12.0'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
	implementation 'org.springframework.session:spring-session-core'
	
	// fegin
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'io.github.openfeign:feign-httpclient'

    // security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation "org.springframework.cloud:spring-cloud-security:${springColudSecurityVersion}"
	implementation 'org.springframework.security.oauth:spring-security-oauth2'
    implementation 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure'

	// db
	implementation "org.mariadb.jdbc:mariadb-java-client:${mariaDbClientVersion}"
	implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:${springMybatisVersion}"
	implementation "org.springframework.data:spring-data-redis:${springRedisVersion}"
	implementation "redis.clients:jedis:${jedisVersion}"

	// other
	annotationProcessor 'org.projectlombok:lombok'
	implementation "org.apache.commons:commons-lang3:${commonsVersion}"

//	// https://mvnrepository.com/artifact/io.quarkus/quarkus-spring-di
//	implementation 'io.quarkus:quarkus-spring-di:2.3.0.Final'

	// for test
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
	compileOnly {
		extendsFrom annotationProcessor
	}
	testCompileOnly {
		extendsFrom testAnnotationProcessor
	}
	integrationTestCompile.extendsFrom testImplementation
	integrationTestRuntime.extendsFrom testRuntime
	compileClasspath {
		resolutionStrategy.activateDependencyLocking()
	}
	runtimeClasspath {
		resolutionStrategy.activateDependencyLocking()
	}
}

bootRun {
	jvmArgs = [
		'-Dspring.profiles.active=local',
		'-Dlogging.config=classpath:log4j2-local.xml'
	]
	if (project.hasProperty('jvmArgs')) {
		jvmArgs = (project.jvmArgs.split("\\s+" as Closure) as List)
	}
	dependsOn(composeUp)
}

test {
	jvmArgs = [
		'-Dlogging.config=classpath:log4j2-local.xml'
	]
	useJUnitPlatform()
	testLogging {
		exceptionFormat 'full'
		events('started', 'passed', 'skipped', 'failed')
	}
	outputs.upToDateWhen { false }
	dependsOn(composeUp)
}

task integrationTest(type: Test) {
	useJUnitPlatform()
	group = "verification"
	testClassesDirs = sourceSets.integrationTest.output
	classpath = sourceSets.integrationTest.runtimeClasspath
	testLogging {
		exceptionFormat 'full'
		events('started', 'passed', 'skipped', 'failed')
	}
	mustRunAfter(test)
	outputs.upToDateWhen { false }
	dependsOn(composeUp)
}

task updateLockFile(type: Exec) {
	group = "other"
    executable = "$rootDir/update_gradle_lock_file.bat"
//    executable = "$rootDir/update_gradle_lock_file.sh"
}

dockerCompose {
	isRequiredBy(project.tasks.getByName("bootRun"))
	isRequiredBy(project.tasks.getByName("test"))
	isRequiredBy(project.tasks.getByName("integrationTest"))
}

// 以下の行を記載
tasks.withType(AbstractCompile)*.options*.encoding = tasks.withType(GroovyCompile)*.groovyOptions*.encoding = 'UTF-8'